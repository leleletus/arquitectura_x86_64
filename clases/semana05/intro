https://github.com/stefano-sosac/iee240-learning-material/wiki/Punto-Flotante-y-Convenciones-de-llamadas-a-funci%C3%B3n-en-64-bits

cvtss2sd xmm0, [x]  ; convertir el float en x a double en xmm0
ctv = convert ss=float 2=to sd double

cvtsd2ss xmm0, xmm0 ; el float en xmm0 a double en xmm0
ctv = convert ss=float

cvtsi2sd xmm0, [x]  ; int en x a double en xmm0


Instruciones Aritméticas de Punto Flotante
Estas intrucciones permiten ejecutar operaciones de suma, resta, multiplicación, división y raíz cuadrada con operandos en punto flotante de 32 o 64 bits.

    addss   xmm0, [a]   ;   xmm0 <- xmm0 + [a] (float)
    addss   xmm0, xmm1  ;   xmm0 <- xmm0 + xmm1 (float)
    addsd   xmm0, [b]   ;   xmm0 <- xmm0 + [b] (double)
    addsd   xmm0, xmm1  ;   xmm0 <- xmm0 + xmm1 (double)
    subss   xmm0, [a]   ;   xmm0 <- xmm0 - [a] (float)
    subss   xmm0, xmm1  ;   xmm0 <- xmm0 - xmm1 (float)
    subsd   xmm0, [b]   ;   xmm0 <- xmm0 - [b] (double)
    subsd   xmm0, xmm1  ;   xmm0 <- xmm0 - xmm1 (double)
    mulss   xmm0, [a]   ;   xmm0 <- xmm0 * [a] (float)
    mulss   xmm0, xmm1  ;   xmm0 <- xmm0 * xmm1 (float)
    mulsd   xmm0, [b]   ;   xmm0 <- xmm0 * [b] (double)
    mulsd   xmm0, xmm1  ;   xmm0 <- xmm0 * xmm1 (double)
    divss   xmm0, [a]   ;   xmm0 <- xmm0 / [a] (float)
    divss   xmm0, xmm1  ;   xmm0 <- xmm0 / xmm1 (float)
    divsd   xmm0, [b]   ;   xmm0 <- xmm0 / [b] (double)
    divsd   xmm0, xmm1  ;   xmm0 <- xmm0 / xmm1 (double)
    sqrtss  xmm0, [a]   ;   xmm0 <- ([a])^0.5 (float)
    sqrtss  xmm0, xmm1  ;   xmm0 <- (xmm1)^0.5 (float)
    sqrtsd  xmm0, [b]   ;   xmm0 <- ([b])^0.5 (double)
    sqrtsd  xmm0, xmm1  ;   xmm0 <- (xmm1)^0.5 (double)


Comparaciones en Punto Flotante (esra cmp en enteros)
La forma general de las operaciones de comparación es una de las siguientes:

    ucomiss Rxmm, op2
    ucomisd Rxmm, op2

Donde Rxmm y op2 son operandos en punto flotante y deben ser del mismo tamaño. Ninguno de los operandos será alterado por las operaciones de comparación. El operando Rxmm debe ser un registro xmm, y el operando op2 puede ser un registro xmm o el contenido de una posición de memoria.



En los siguientes ejemplos se pueden apreciar algunas de las operaciones de saltos de control que se pueden realizar:

    je  label   ;   jump equal          si op1  ==  op2
    jne label   ;   jump not equal      si op1  !=  op2
    jb  label   ;   jump below than     si op1  <   op2
    jbe label   ;   jump below or equal si op1  <=  op2
    ja  label   ;   jump above than     si op1  >   op2
    jae label   ;   jump above or equal si op1  >=  op2




Paso de Parámetros
Como se mencionó anteriormente los parámetros pueden ser pasados a una función mediante el uso de registros o de la pila. La siguiente tabla muestra cuales son los registros que se usan cuando enteros (char, short, int, long) o flotantes (float, double).

En la tabla se puede apreciar los registros que se corresponden con los argumentos de una función:

Posición del argumento	Entero	Flotante
Primero	rdi	xmm0
Segundo	rsi	xmm1
Tercero	rdx	xmm2
Cuarto	rcx	xmm3
Quinto	r8	xmm4
Sexto	r9	xmm5
Séptimo		xmm6
Octavo		xmm7
En el siguiente ejemplo se muestra una función llamada myfunction y sus argumentos. En el comentario se indica en que registro va cada parámetro de la función.

extern void my_function(char a, short b, float c, double *d, double e)
// a en rdi, b en rsi, c en xmm0, d en rdx, e en xmm1